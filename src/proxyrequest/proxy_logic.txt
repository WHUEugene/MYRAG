                      +----------------+
                      | proxy_server.py|
                      |   (主入口点)    |
                      +-------+--------+
                              |
                              v
                   +----------+---------+
                   |request_handlers.py |
                   |  (请求处理逻辑)    |
                   +--+-------+-------+-+
                      |       |       |
          +-----------+       |       +------------+
          |                   |                    |
          v                   v                    v
+-------------------+ +----------------+ +-------------------+
| 图像处理服务       | | RAG服务        | | Web搜索服务       |
| (image_processor.py)| (rag_service.py) | (web_search.py)    |
+--------+----------+ +--------+-------+ +---------+---------+
         |                     |                   |
         +----------+----------+-------------------+
                    |
                    v
      +-------------+--------------+     +-------------------+
      |   context_enhancer.py     | <-- |response_formatter.py|
      |   (上下文增强工具)        |     |  (响应格式化工具)   |
      +-------------+--------------+     +-------------------+
                    |
                    v
               Ollama API 

数据流向
客户端请求 → proxy_server.py → 根据请求类型分发
聊天请求：
handle_chat_request() → 创建TaskManager → 并行执行任务
各任务结果 → enhance_prompt_with_context() → 增强提示词
增强提示词 → Ollama API → create_ollama_response() → 客户端
普通请求：
handle_regular_request() → 直接转发到Ollama → 客户端
关键设计模式
模块化设计：每个文件负责不同的功能，职责清晰
适配器模式：context_enhancer.py适配不同格式的提示词
工厂模式：response_formatter.py创建标准格式的响应对象
并发模式：TaskManager使用asyncio并行处理多个增强任务